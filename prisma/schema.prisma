
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Employee {
  id          Int      @id @default(autoincrement())
  employeeId  String   @unique @map("employee_id")
  firstName   String? @map("first_name")
  lastName    String? @map("last_name")
  email       String   @unique
  password    String
  phone       String?
  address     String?
  passwordUpdated Boolean @default(false) @map("password_updated")
  employmentStatus EmploymentStatus @default(Active) @map("employment_status")
  employmentDate DateTime @map("employment_date")
  terminationDate DateTime? @map("termination_date")

  roleId       Int  @map("role_id")
  departmentId Int  @map("department_id")

  department  Department @relation(fields: [departmentId], references: [id])
  role       Role @relation(fields: [roleId], references: [id])

  leaves      Leave[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  description    String?
  permissions    String           // comma separated list of permissions

  employees      Employee[]

  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")

  @@map("roles")
}

model Department {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique

  employees Employee[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("departments")
}

model Leave {
  id          Int      @id @default(autoincrement())
  type        String
  startDate   DateTime  @map("start_date")
  endDate     DateTime  @map("end_date")
  reason      String
  status      LeaveStatus @default(PENDING)

  employeeId  Int   @map("employee_id")
  employee    Employee @relation(fields: [employeeId], references: [id])

  leaveTypeId Int   @map("leave_type_id")
  leaveType   LeaveType @relation(fields: [leaveTypeId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("leaves")
}

model LeaveType {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  maxDays     Int?    @map("max_days")

  leaves      Leave[]
  leaveRequirements LeaveRequirement[]

  @@map("leave_types")
}

model LeaveRequirement {
  id          Int      @id @default(autoincrement())
  name        String
  leaveTypeId Int      @map("leave_type_id")

  leaveType   LeaveType    @relation(fields: [leaveTypeId], references: [id])

  @@map("leave_requirements")
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum EmploymentStatus {
  Active
  Suspended
  Terminated
}